Data Acquisition
Software included the SRAToolkit.
Data was located using the SRA Run Selector in the Gene Expression Omnibus.
Scripts include the download_data.sh script to download and extract the data, the zipped_data.sh script to zip the fastq files.
Results were too large to push to Github.

Quality Control
Software included FastQC.
Scripts include quality_result.sh to run FastQC on each sample.
The quality_result.sh, fastqc.html, and fastqc.zip files were pushed to Github.

Sequence Alignment to Human Genome
Software included STAR.
Data for the human reference genome was downloaded from ENSEMBL.
Scripts included indexing.sh which did not run to competion due to size constraints.
The indexing.sh script was pushed to Github in the seq_align folder.

De Novo Transcriptome Assembly
Software included Trinity.
Scripts include combined_assemble.sh to de novo assemble the two combined SRA runs.
Results include trinity_assembly.Trinity.fasta, trinity_assembly.Trinity.fasta.gene_trans_map, and other respective files.
The script, fasta file, and trans_gene_map were pushed to Github in the combined_assembly directory.

De Novo Assembly Verification
Software included Assemblathon.
Scripts included assembly_statistics.sh to verify the trinity assembly.
The trinity_assembly.Trinity.fasta, trinity_assembly.Trinity.fasta.gene_trans_map, assembly_results.txt, denovo_assemble.sh, and assembly_statistics.sh were pushed to Github within the combined_assembly folder.

Reference Preparation
Software included RSEM, Samtools, and Bowtie2.
Scripts included rsem_ref.sh to prepare the reference sequences and index for calculating gene counts.
The script was pushed to github in the gene_quants folder.

Gene Expression Quantification
Software included RSEM, Bowtie2, and Samtools.
Scripts included Nulliparous_expression.sh and Parous_expression.sh to quantify the number of reads mapped to each gene,nulliparous_expression_rerun.sh and parous_expression_rerun.sh to quantify the number of reads from the filtered BAM file, and Data_matrix.sh compiled the results into a counts matrix.
The nulli_expression_bam_analysis.txt, nulli_expression_filtered_primary_bam.txt, parous_expression_bam_analysis.txt, and parous_expression_filtered_primary_bam.txt were pushed to GitHub in the gene_quant folder (excepting data.counts.matrix due to size constraints). 

Differential Gene Expression Comparing Parous and Nulliparous
Software included R/R Studio, Bioconductor, DESeq2, ggplot, and pheatmap.
The R Studio commands were complied into a R_code.sh script and pushed to GitHub in the R_code directory. A PCA plot and heatmap were generated and included in the results section of this paper. Results were not included in Github as it was generated in R Studio, not linked to GitHub, and likely too large to push. Abbreviated results were included in the results section.

BLAST Alignment
BLAST was installed.
BLAST_SAE.sh script was developed to identify transcripts within the Trinity assembly that have a high percent identity to the target gene sequences. 
The BLAST output files SAE_db.out, SAE2_db.out, UBC9_db.out and BLAST_SAE.sh were pushed to Github in the identify_genes folder.

Functional Pathway Analysis
The ENSEMBL gene IDs for SAE1, SAE2, and UBC9 were listed in DAVID which produced a KEGG pathway result that has been included in this paperâ€™s results [22]. 

